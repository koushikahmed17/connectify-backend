version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: connectify-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: connectify_db
      POSTGRES_USER: connectify_user
      POSTGRES_PASSWORD: connectify_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - connectify-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U connectify_user -d connectify_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # NestJS Backend Application
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: connectify-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://connectify_user:connectify_password@postgres:5432/connectify_db
      JWT_SECRET: your-super-secret-jwt-key-here-change-in-production
      JWT_EXPIRES_IN: 7d
      CORS_ORIGIN: http://localhost:3000
      MAX_FILE_SIZE: 10485760
      UPLOAD_PATH: ./uploads
      SMTP_HOST: smtp.gmail.com
      SMTP_PORT: 587
      SMTP_SECURE: false
      SMTP_USER: your-email@gmail.com
      SMTP_PASS: your-app-password
      SMTP_FROM: Connectify <your-email@gmail.com>
      FRONTEND_URL: http://localhost:3000
      GOOGLE_CLIENT_ID: your-google-client-id
      GOOGLE_CLIENT_SECRET: your-google-client-secret
    ports:
      - "3001:3001"
    volumes:
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - connectify-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:

networks:
  connectify-network:
    driver: bridge






